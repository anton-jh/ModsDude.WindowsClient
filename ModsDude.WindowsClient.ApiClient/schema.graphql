schema {
  query: RootQuery
  mutation: RootMutation
}

type RootQuery {
  test: String!
}

type RootMutation {
  test(input: TestInput!): TestPayload!
  registerUser(input: RegisterUserInput!): RegisterUserPayload!
  login(input: LoginInput!): LoginPayload!
}

type UsernameTakenError implements Error {
  message: String!
}

type InvalidSystemInviteError implements Error {
  message: String!
}

type UserNotFoundError implements Error {
  message: String!
}

type WrongPasswordError implements Error {
  message: String!
}

interface Error {
  message: String!
}

type LoginResult {
  accessToken: String!
  refreshToken: String!
}

input TestInput {
  parameter: String!
}

type TestPayload {
  string: String
}

input RegisterUserInput {
  username: String!
  password: String!
  systemInvite: String!
}

union RegisterUserError = UsernameTakenError | InvalidSystemInviteError

type RegisterUserPayload {
  loginResult: LoginResult
  errors: [RegisterUserError!]
}

input LoginInput {
  username: String!
  password: String!
}

union LoginError = UserNotFoundError | WrongPasswordError

type LoginPayload {
  loginResult: LoginResult
  errors: [LoginError!]
}